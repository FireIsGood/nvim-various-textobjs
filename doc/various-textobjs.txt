*various-textobjs.txt*      For NVIM v0.8.0      Last change: 2023 December 20

==============================================================================
Table of Contents                         *various-textobjs-table-of-contents*

1. nvim-various-textobjs             |various-textobjs-nvim-various-textobjs-|
  - List of Text Objects|various-textobjs-nvim-various-textobjs--list-of-text-objects|
  - Non-Goals              |various-textobjs-nvim-various-textobjs--non-goals|
  - Installation        |various-textobjs-nvim-various-textobjs--installation|
  - Configuration      |various-textobjs-nvim-various-textobjs--configuration|
  - Advanced Usage / API|various-textobjs-nvim-various-textobjs--advanced-usage-/-api|
  - Limitations          |various-textobjs-nvim-various-textobjs--limitations|
  - Other Text Object Plugins|various-textobjs-nvim-various-textobjs--other-text-object-plugins|
  - Credits                  |various-textobjs-nvim-various-textobjs--credits|

==============================================================================
1. nvim-various-textobjs             *various-textobjs-nvim-various-textobjs-*



Bundleof more than two dozen new textobjects for Neovim.

- |various-textobjs-list-of-text-objects|
- |various-textobjs-non-goals|
- |various-textobjs-installation|
- |various-textobjs-configuration|
- |various-textobjs-advanced-usage-/-api|
    - |various-textobjs-`ii`-on-unindented-line-should-select-entire-buffer|
    - |various-textobjs-forward-seeking-`gx`|
    - |various-textobjs-delete-surrounding-indentation|
    - |various-textobjs-yank-surrounding-indentation|
    - |various-textobjs-other-ideas?|
- |various-textobjs-limitations|
- |various-textobjs-other-text-object-plugins|
- |various-textobjs-credits|


LIST OF TEXT OBJECTS*various-textobjs-nvim-various-textobjs--list-of-text-objects*

  --------------------------------------------------------------------------------------------------------------
  textobject               description            inner / outer          forward-seeking    default  filetypes
                                                                                            keymaps  (for
                                                                                                     default
                                                                                                     keymaps)
  ------------------------ ---------------------- ---------------------- ----------------- --------- -----------
  indentation              surrounding lines with see overview from      -                  ii, ai,  all
                           same or higher         vim-indent-object                        aI, (iI)  
                           indentation                                                               

  restOfIndentation        lines down with same   -                      -                     R     all
                           or higher indentation                                                     

  greedyOuterIndentation   outer indentation,     outer includes a       -                   ag/ig   all
                           expanded to blank      blank, like ap/ip                                  
                           lines; useful to get                                                      
                           functions with                                                            
                           annotations                                                               

  subword                  like iw, but treating  outer includes         -                  iS, aS   all
                           -, _, and . as word    trailing _,-, or space                             
                           delimiters and only                                                       
                           part of camelCase                                                         

  toNextClosingBracket     from cursor to next    -                      small                 C     all
                           closing ], ), or }                                                        

  toNextQuotationMark      from cursor to next    -                      small                 Q     all
                           unescaped[1] ", ', or                                                     
                           `                                                                         

  anyQuote                 between any            outer includes the     small               iq/aq   all
                           unescaped[2] ", ', or  quotatin marks                                     
                           ` in a line                                                               

  restOfParagraph          like }, but linewise   -                      -                     r     all

  multiCommentedLines      consecutive, fully     -                      big                  gc     all
                           commented lines                                                           

  entireBuffer             entire buffer as one   -                      -                    gG     all
                           text object                                                               

  nearEoL                  from cursor position   -                      -                     n     all
                           to end of line, minus                                                     
                           one character                                                             

  lineCharacterwise        current line, but      outer includes         -                  i_, a_   all
                           characterwise          indentation and                                    
                                                  trailing spaces                                    

  column                   column down until      -                      -                    \|     all
                           indent or shorter                                                         
                           line. Accepts {count}                                                     
                           for multiple columns.                                                     

  value                    value of key-value     outer includes         small              iv, av   all
                           pair, or right side of trailing commas or                                 
                           a variable assignment  semicolons                                         
                           (inside one line)                                                         

  key                      key of key-value pair, outer includes the =   small              ik, ak   all
                           or left side of a      or :                                               
                           variable assignment                                                       

  url                      link beginning with    -                      big                   L     all
                           “http”                                                                    

  number                   numbers, similar to    inner: only pure       small              in, an   all
                           <C-a>                  digits, outer: number                              
                                                  including minus sign                               
                                                  and decimal point                                  

  diagnostic               LSP diagnostic         -                      big                   !     all
                           (requires built-in                                                        
                           LSP)                                                                      

  closedFold               closed fold            outer includes one     big                iz, az   all
                                                  line after the last                                
                                                  folded line                                        

  chainMember              field with the full    outer includes the     small              im, am   all
                           call, like             leading . (or :)                                   
                           .encode(param)                                                            

  visibleInWindow          all lines visible in   -                      -                    gw     all
                           the current window                                                        

  restOfWindow             from the cursorline to -                      -                    gW     all
                           the last line in the                                                      
                           window                                                                    

  mdlink                   markdown link like     inner is only the link small              il, al   markdown,
                           [title](url)           title (between the [])                             toml

  mdFencedCodeBlock        markdown fenced code   outer includes the     big                iC, aC   markdown
                           (enclosed by three     enclosing backticks                                
                           backticks)                                                                

  cssSelector              class in CSS like      outer includes         small              ic, ac   css, scss
                           .my-class              trailing comma and                                 
                                                  space                                              

  htmlAttribute            attribute in html/xml  inner is only the      small              ix, ax   html, xml,
                           like href="foobar.com" value inside the                                   css, scss,
                                                  quotes trailing comma                              vue
                                                  and space                                          

  doubleSquareBrackets     text enclosed by [[]]  outer includes the     small              iD, aD   lua, shell,
                                                  four square brackets                               neorg,
                                                                                                     markdown

  shellPipe                command stdout is      outer includes the     small               iP,aP   bash, zsh,
                           piped to               front pipe character                               fish, sh

  pyTripleQuotes           python strings         inner excludes the """ -                   iy,ay   python
                           surrounded by three    or '''                                             
                           quotes (regular or                                                        
                           f-string)                                                                 

  notebookCell             cell delimited by      outer includes the     -                   iN,aN   all
                           double percent         bottom cell border                                 
                           comment, such as # %%                                                     
  --------------------------------------------------------------------------------------------------------------

[1] This respects vim’s quoteescape option.

[2] This respects vim’s quoteescape option.

NON-GOALS                  *various-textobjs-nvim-various-textobjs--non-goals*

nvim-treesitter-textobjects
<https://github.com/nvim-treesitter/nvim-treesitter-textobjects> already does
an excellent job when it comes to using Treesitter for text objects, such as
function arguments or loops. This plugin’s goal is therefore not to provide
textobjects provided by `nvim-treesitter-textobjects`.


INSTALLATION            *various-textobjs-nvim-various-textobjs--installation*

Have `nvim-various-textobjs` set up text objects for you:

>lua
    -- lazy.nvim
    {
        "chrisgrieser/nvim-various-textobjs",
        lazy = false,
        opts = { useDefaultKeymaps = true },
    },
    
    -- packer
    use {
        "chrisgrieser/nvim-various-textobjs",
        config = function () 
            require("various-textobjs").setup({ useDefaultKeymaps = true })
        end,
    }
<

If you prefer to set up your own keybindings, use this code and then see the
|various-textobjs-configuration| section for information on setting your own
keymaps.

>lua
    -- lazy.nvim
    {
        "chrisgrieser/nvim-various-textobjs",
        lazy = true,
    },
    
    -- packer
    use {
        "chrisgrieser/nvim-various-textobjs",
    }
<


  [!NOTE] You can also use the `disabledKeymaps` config option to disable only
  _some_ default keymaps.

CONFIGURATION          *various-textobjs-nvim-various-textobjs--configuration*

The `.setup()` call is optional if you are fine with the defaults below.

>lua
    -- default config
    require("various-textobjs").setup {
        -- lines to seek forwards for "small" textobjs (mostly characterwise textobjs)
        -- set to 0 to only look in the current line
        lookForwardSmall = 5,
    
        -- lines to seek forwards for "big" textobjs (mostly linewise textobjs)
        lookForwardBig = 15,
    
        -- use suggested keymaps (see overview table in README)
        useDefaultKeymaps = false,
    
        -- disable some default keymaps, e.g. { "ai", "ii" }
        disabledKeymaps = {},
    }
<

------------------------------------------------------------------------------
If you want to set your own keybindings, you can do so by calling the
respective functions: - The function names correspond to the textobject names
from the |various-textobjs-overview-table|. - The keymaps need to be called as
Ex-command, otherwise they are dot-repeatable. (`function ()
require("various-textobjs").diagnostic() end` as third argument for the keymap
works in general, but the text objects is not dot-repeatable then.)

_Previous versions used a boolean parameter, but for verbosity reasons, this
plugin now uses "outer" and "inner". For backwards-compatibility with existing
keymaps, boolean parameters are still accepted though._

>lua
    -- example: `?` for diagnostic textobj
    vim.keymap.set({ "o", "x" }, "?", '<cmd>lua require("various-textobjs").diagnostic()<CR>')
    
    -- example: `aS` for outer subword, `iS` for inner subword
    vim.keymap.set({ "o", "x" }, "aS", '<cmd>lua require("various-textobjs").subword("outer")<CR>')
    vim.keymap.set({ "o", "x" }, "iS", '<cmd>lua require("various-textobjs").subword("inner")<CR>')
    
    -- exception: indentation textobj requires two parameters, the first for
    -- exclusion of the starting border, the second for the exclusion of ending
    -- border
    vim.keymap.set(
        { "o", "x" },
        "ii",
        '<cmd>lua require("various-textobjs").indentation("inner", "inner")<CR>'
    )
    vim.keymap.set(
        { "o", "x" },
        "ai",
        '<cmd>lua require("various-textobjs").indentation("outer", "inner")<CR>'
    )
    
    -- an additional parameter can be passed to control whether blank lines are included
    vim.keymap.set(
        { "o", "x" },
        "ai",
        '<cmd>lua require("various-textobjs").indentation("outer", "inner", "noBlanks")<CR>'
    )
<

For your convenience, here the code to create mappings for all text objects. You
can copypaste this list and enter your own bindings.Mappings for all text objects ~

>lua
    local keymap = vim.keymap.set
    
    keymap({ "o", "x" }, "ii", "<cmd>lua require('various-textobjs').indentation('inner', 'inner')<CR>")
    keymap({ "o", "x" }, "ai", "<cmd>lua require('various-textobjs').indentation('outer', 'inner')<CR>")
    keymap({ "o", "x" }, "iI", "<cmd>lua require('various-textobjs').indentation('inner', 'inner')<CR>")
    keymap({ "o", "x" }, "aI", "<cmd>lua require('various-textobjs').indentation('outer', 'outer')<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').restOfIndentation()<CR>")
    
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').greedyOuterIndentation('inner')<CR>"
    )
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').greedyOuterIndentation('outer')<CR>"
    )
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').subword('inner')<CR>")
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').subword('outer')<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').toNextClosingBracket()<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').toNextQuotationMark()<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').anyQuote('inner')<CR>")
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').anyQuote('outer')<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').restOfParagraph()<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').entireBuffer()<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').nearEoL()<CR>")
    
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').lineCharacterwise('inner')<CR>"
    )
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').lineCharacterwise('outer')<CR>"
    )
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').column()<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').multiCommentedLines()<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').notebookCell('inner')<CR>")
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').notebookCell('outer')<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').value('inner')<CR>")
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').value('outer')<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').key('inner')<CR>")
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').key('outer')<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').url()<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').number('inner')<CR>")
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').number('outer')<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').diagnostic()<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').closedFold('inner')<CR>")
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').closedFold('outer')<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').chainMember('inner')<CR>")
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').chainMember('outer')<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').visibleInWindow()<CR>")
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').restOfWindow()<CR>")
    
    --------------------------------------------------------------------------------------
    -- put these into the ftplugins or autocmds for the filetypes you want to use them with
    
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').mdlink('inner')<CR>",
        { buffer = true }
    )
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').mdlink('outer')<CR>",
        { buffer = true }
    )
    
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').mdFencedCodeBlock('inner')<CR>",
        { buffer = true }
    )
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').mdFencedCodeBlock('outer')<CR>",
        { buffer = true }
    )
    
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').pyTripleQuotes('inner')<CR>",
        { buffer = true }
    )
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').pyTripleQuotes('outer')<CR>",
        { buffer = true }
    )
    
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').cssSelector('inner')<CR>",
        { buffer = true }
    )
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').cssSelector('outer')<CR>",
        { buffer = true }
    )
    
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').htmlAttribute('inner')<CR>",
        { buffer = true }
    )
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').htmlAttribute('outer')<CR>",
        { buffer = true }
    )
    
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').doubleSquareBrackets('inner')<CR>",
        { buffer = true }
    )
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').doubleSquareBrackets('outer')<CR>",
        { buffer = true }
    )
    
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').shellPipe('inner')<CR>",
        { buffer = true }
    )
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').shellPipe('outer')<CR>",
        { buffer = true }
    )
<


ADVANCED USAGE / API*various-textobjs-nvim-various-textobjs--advanced-usage-/-api*

All textobjects can also be used as an API to modify their behavior or create
custom commands. Here are some examples:


II ON UNINDENTED LINE SHOULD SELECT ENTIRE BUFFER ~

Using a simple if-else-block, you can create a hybrid of the inner indentation
text object and the entire-buffer text object, you prefer that kind of
behavior:

>lua
    -- when on unindented line, `ii` should select entire buffer
    vim.keymap.set("o", "ii", function()
        if vim.fn.indent(".") == 0 then
            require("various-textobjs").entireBuffer()
        else
            require("various-textobjs").indentation("inner", "inner")
        end
    end)
<


FORWARD-SEEKING GX ~

The code below retrieves the next URL (within the amount of lines configured in
the `setup` call), and opens it in your browser. As opposed to vim’s built-in
`gx`, this is forward-seeking, meaning your cursor does not have to stand on
the URL.

>lua
    vim.keymap.set("n", "gx", function()
        -- select URL
        require("various-textobjs").url()
    
        -- plugin only switches to visual mode when textobj found
        local foundURL = vim.fn.mode():find("v")
        if not foundURL then return end
    
        -- retrieve URL with the z-register as intermediary
        vim.cmd.normal { '"zy', bang = true }
        local url = vim.fn.getreg("z")
    
        -- open with the OS-specific shell command
        local opener
        if vim.fn.has("macunix") == 1 then
            opener = "open"
        elseif vim.fn.has("linux") == 1 then
            opener = "xdg-open"
        elseif vim.fn.has("win64") == 1 or vim.fn.has("win32") == 1 then
            opener = "start"
        end
        local openCommand = string.format("%s '%s' >/dev/null 2>&1", opener, url)
        vim.fn.system(openCommand)
    end, { desc = "URL Opener" })
<


DELETE SURROUNDING INDENTATION ~

Using the indentation textobject, you can also create custom
indentation-related utilities. A common operation is to remove the line before
and after an indentation. Take for example this case where you are removing the
`foo` condition:

>lua
    -- before (cursor on `print("bar")`)
    if foo then
        print("bar")
        print("baz")
    end
    
    -- after
    print("bar")
    print("baz")
<

The code below achieves this by dedenting the inner indentation textobject
(essentially running `<ii`), and deleting the two lines surrounding it. As for
the mapping, `dsi` should make sense since this command is somewhat similar to
the `ds` operator from vim-surround <https://github.com/tpope/vim-surround> but
performed on an indentation textobject. (It is also an intuitive mnemonic:
`d`elete `s`urrounding `i`ndentation.)

>lua
    vim.keymap.set("n", "dsi", function()
        -- select inner indentation
        require("various-textobjs").indentation("outer", "outer")
    
        -- plugin only switches to visual mode when a textobj has been found
        local indentationFound = vim.fn.mode():find("V")
        if not indentationFound then return end
    
        -- dedent indentation
        vim.cmd.normal { "<", bang = true }
    
        -- delete surrounding lines
        local endBorderLn = vim.api.nvim_buf_get_mark(0, ">")[1]
        local startBorderLn = vim.api.nvim_buf_get_mark(0, "<")[1]
        vim.cmd(tostring(endBorderLn) .. " delete") -- delete end first so line index is not shifted
        vim.cmd(tostring(startBorderLn) .. " delete")
    end, { desc = "Delete Surrounding Indentation" })
<


YANK SURROUNDING INDENTATION ~

Similarly, you can also create a `ysii` command to yank the two lines
surrounding an indentation textobject. (We are not using `ysi`, since that
blocks surround commands like `ysi)`). Using `nvim_win_[gs]et_cursor()`, you
make the operation sticky, meaning the cursor is not moved.
`vim.highlight.range` is used to highlight the yanked text, to imitate the
effect of `vim.highlight.yank`.

>lua
    vim.keymap.set("n", "ysii", function()
        local startPos = vim.api.nvim_win_get_cursor(0)
    
        -- identify start- and end-border
        require("various-textobjs").indentation("outer", "outer")
        local indentationFound = vim.fn.mode():find("V")
        if not indentationFound then return end
        vim.cmd.normal({ "V", bang = true }) -- leave visual mode so the `'<` `'>` marks are set
    
        -- copy them into the + register
        local startLn = vim.api.nvim_buf_get_mark(0, "<")[1] - 1
        local endLn = vim.api.nvim_buf_get_mark(0, ">")[1] - 1
        local startLine = vim.api.nvim_buf_get_lines(0, startLn, startLn + 1, false)[1]
        local endLine = vim.api.nvim_buf_get_lines(0, endLn, endLn + 1, false)[1]
        vim.fn.setreg("+", startLine .. "\n" .. endLine .. "\n")
    
        -- highlight yanked text
        local ns = vim.api.nvim_create_namespace("ysi")
        vim.highlight.range(0, ns, "IncSearch", { startLn, 0 }, { startLn, -1 })
        vim.highlight.range(0, ns, "IncSearch", { endLn, 0 }, { endLn, -1 })
        vim.defer_fn(function() vim.api.nvim_buf_clear_namespace(0, ns, 0, -1) end, 1000)
    
        -- restore cursor position
        vim.api.nvim_win_set_cursor(0, startPos)
    end, { desc = "Yank surrounding indentation" })
<


OTHER IDEAS? ~

If you have some other useful ideas, feel free to share them in this repo’s
discussion page
<https://github.com/chrisgrieser/nvim-various-textobjs/discussions>.


LIMITATIONS              *various-textobjs-nvim-various-textobjs--limitations*

- This plugin uses pattern matching, so it can be inaccurate in some edge cases.
- The value textobject does not work with multi-line values.


OTHER TEXT OBJECT PLUGINS*various-textobjs-nvim-various-textobjs--other-text-object-plugins*

- treesitter-textobjects <https://github.com/nvim-treesitter/nvim-treesitter-textobjects>
- treesitter-textsubjects <https://github.com/RRethy/nvim-treesitter-textsubjects>
- ts-hint-textobject <https://github.com/mfussenegger/nvim-ts-hint-textobject>
- mini.ai <https://github.com/echasnovski/mini.nvim/blob/main/readmes/mini-ai.md>
- targets.vim <https://github.com/wellle/targets.vim>


CREDITS                      *various-textobjs-nvim-various-textobjs--credits*

**Thanks** - To the Valuable Dev for their blog post on how to get started with
creating custom text objects
<https://thevaluable.dev/vim-create-text-objects/>. - To `@vypxl` and `@ii14`
for figuring out dot-repeatability.
<https://github.com/chrisgrieser/nvim-spider/pull/4>

**About Me** In my day job, I am a sociologist studying the social mechanisms
underlying the digital economy. For my PhD project, I investigate the
governance of the app economy and how software ecosystems manage the tension
between innovation and compatibility. If you are interested in this subject,
feel free to get in touch.

**Blog** I also occasionally blog about vim: Nano Tips for Vim
<https://nanotipsforvim.prose.sh>

**Profiles** - Discord <https://discordapp.com/users/462774483044794368/> -
Academic Website <https://chris-grieser.de/> - GitHub
<https://github.com/chrisgrieser/> - Twitter <https://twitter.com/pseudo_meta>
- ResearchGate <https://www.researchgate.net/profile/Christopher-Grieser> -
LinkedIn <https://www.linkedin.com/in/christopher-grieser-ba693b17a/>



Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
