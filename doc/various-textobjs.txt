*various-textobjs.txt*        For NVIM v0.8.0       Last change: 2023 April 08

==============================================================================
Table of Contents                         *various-textobjs-table-of-contents*

1. nvim-various-textobjs             |various-textobjs-nvim-various-textobjs-|
  - List of Text Objects|various-textobjs-nvim-various-textobjs--list-of-text-objects|
  - Installation        |various-textobjs-nvim-various-textobjs--installation|
  - Configuration      |various-textobjs-nvim-various-textobjs--configuration|
  - Advanced Usage    |various-textobjs-nvim-various-textobjs--advanced-usage|
  - Limitations          |various-textobjs-nvim-various-textobjs--limitations|
  - Other Text-Object Plugins|various-textobjs-nvim-various-textobjs--other-text-object-plugins|
  - Credits                  |various-textobjs-nvim-various-textobjs--credits|

==============================================================================
1. nvim-various-textobjs             *various-textobjs-nvim-various-textobjs-*

Bundleof more than a dozen new text objects for Neovim.


  **Note** If you installed the plugin before March 31st and have set your own
  keymaps, you should change your keymappings to call the text objects via
  Ex-commands `"<cmd>lua require('various-textobjs').textobj(bool)<CR>"`. This
  makes the text objects dot-repeatable. See the example in the
  |various-textobjs-configuration-section|.

- |various-textobjs-list-of-text-objects|
- |various-textobjs-installation|
- |various-textobjs-configuration|
- |various-textobjs-advanced-usage|
    - |various-textobjs-smart-alternative-to-`gx`|
- |various-textobjs-limitations|
- |various-textobjs-other-text-object-plugins|
- |various-textobjs-credits|


LIST OF TEXT OBJECTS*various-textobjs-nvim-various-textobjs--list-of-text-objects*

  ---------------------------------------------------------------------------------------------------------------
  textobj                description             inner / outer          forward-seeking    default  filetypes
                                                                                           keymaps  (for default
                                                                                                    keymaps)
  ---------------------- ----------------------- ---------------------- ----------------- --------- -------------
  indentation            surrounding lines with  see overview from      no                 ii, ai,  all
                         same or higher          vim-indent-object                        aI, (iI)  
                         indentation                                                                

  restOfIndentation      lines down with same or -                      no                    R     all
                         higher indentation                                                         

  subword                like iw, but treating   outer includes         yes                iS, aS   all
                         -, _, and . as word     trailing _ or -                                    
                         delimiters and only                                                        
                         part of camelCase                                                          

  toNextClosingBracket   from cursor to next     -                      no                    %     all
                         closing ], ), or }                                                         

  restOfParagraph        like }, but linewise    -                      no                    r     all

  entireBuffer           entire buffer as one    -                      -                    gG     all
                         text object                                                                

  nearEoL                from cursor position to -                      no                    n     all
                         end of line, minus one                                                     
                         character                                                                  

  lineCharacterwise      current line, but       -                      no                    _     all
                         characterwise                                                              

  column                 column down until       -                      no                \| (pipe  all
                         indent or shorter line.                                            char)   
                         Accepts {count} for                                                        
                         multiple columns.                                                          

  value                  value of key-value      outer includes         yes                iv, av   all
                         pair, or right side of  trailing commas or                                 
                         a variable assignment   semicolons                                         
                         (inside one line)                                                          

  key                    key of key-value pair,  outer includes the =   yes                 ik,ak   all
                         or left side of a       or                                                 
                         variable assignment                                                        

  url                    link beginning with     -                      yes                   L     all
                         “http”                                                                     

  number                 numbers, similar to     inner: only pure       yes                in, an   all
                         <C-a>                   digits, outer: number                              
                                                 including minus sign                               
                                                 and decimal point                                  

  diagnostic             LSP diagnostic          -                      yes                   !     all
                         (requires built-in LSP)                                                    

  closedFold             closed fold             outer includes one     yes                iz, az   all
                                                 line after the last                                
                                                 folded line                                        

  mdlink                 markdown link like      inner is only the link yes                il, al   markdown,
                         [title](url)            title (between the [])                             toml

  mdFencedCodeBlock      markdown fenced code    outer includes the     yes                iC, aC   markdown
                         (enclosed by three      enclosing backticks                                
                         backticks)                                                                 

  cssSelector            class in CSS, like      outer includes         yes                ic, ac   css, scss
                         .my-class               trailing comma and                                 
                                                 space                                              

  htmlAttribute          attribute in html or    inner is only the      yes                ix, ax   html, xml,
                         xml, like               value inside the                                   css, scss
                         href="foobar.com"       quotes trailing comma                              
                                                 and space                                          

  jsRegex                JavaScript regex        outer includes the     yes                i/, a/   javascript,
                         pattern                 slashes and any flags                              typescript

  doubleSquareBrackets   text enclosed by [[]]   outer includes the     yes                iD, aD   lua, shell,
                                                 four square brackets                               neorg,
                                                                                                    markdown

  shellPipe              command stdout is piped outer includes the     yes                 iP,aP   bash, zsh,
                         to                      front pipe character                               fish, sh
  ---------------------------------------------------------------------------------------------------------------

  **Warning** Textobject deprecated due to treesitter-textobject
  <https://github.com/nvim-treesitter/nvim-treesitter-textobjects> introducing a
  similar textobject that is more capable.

INSTALLATION            *various-textobjs-nvim-various-textobjs--installation*

>lua
    -- packer
    use {
        "chrisgrieser/nvim-various-textobjs",
        config = function () 
            require("various-textobjs").setup({ useDefaultKeymaps = true })
        end,
    }
    
    -- lazy.nvim
    {
        "chrisgrieser/nvim-various-textobjs",
        opts = { useDefaultKeymaps = true },
    },
<


CONFIGURATION          *various-textobjs-nvim-various-textobjs--configuration*

The `.setup()` call is optional if you are fine with the defaults below. (Note
that the default is to **not** set any keymaps.)

>lua
    -- default config
    require("various-textobjs").setup {
        lookForwardLines = 5, -- set to 0 to only look in the current line
        useDefaultKeymaps = false, -- use suggested keymaps (see README)
    }
<

------------------------------------------------------------------------------
If you want to set your own keybindings, you can do so by calling the
respective functions: - The function names correspond to the textobj-names from
the |various-textobjs-overview-table|. - The text objects that differentiate
between outer and inner require a boolean parameter, `true` always meaning
"inner," and `false` meaning "outer." - The keymaps _need_ to be called as
Ex-command, otherwise they will not be dot-repeatable. `function ()
require("various-textobjs").diagnostic() end` as third argument for the keymap
works in general, but the text objects will not be dot-repeatable then.

>lua
    -- example: `?` for diagnostic textobj
    vim.keymap.set({ "o", "x" }, "?", '<cmd>lua require("various-textobjs").diagnostic()<CR>')
    
    -- example: `an` for outer subword, `in` for inner subword
    vim.keymap.set({ "o", "x" }, "aS", '<cmd>lua require("various-textobjs").subword(false)<CR>')
    vim.keymap.set({ "o", "x" }, "iS", '<cmd>lua require("various-textobjs").subword(true)<CR>')
    
    -- exception: indentation textobj requires two parameters, the first for
    -- exclusion of the starting border, the second for the exclusion of ending
    -- border
    vim.keymap.set({ "o", "x" }, "ii", '<cmd>lua require("various-textobjs").indentation(true, true)<CR>')
    vim.keymap.set({ "o", "x" }, "ai", '<cmd>lua require("various-textobjs").indentation(false, true)<CR>')
<

For your convenience, here the code to create mappings for all text objects. You can copypaste this list and enter your own bindings.Mappings for all text objects ~

>lua
    local keymap = vim.keymap.set
    
    keymap({ "o", "x" }, "ii", "<cmd>lua require('various-textobjs').indentation(true, true)<CR>")
    keymap({ "o", "x" }, "ai", "<cmd>lua require('various-textobjs').indentation(false, true)<CR>")
    keymap({ "o", "x" }, "iI", "<cmd>lua require('various-textobjs').indentation(true, true)<CR>")
    keymap({ "o", "x" }, "aI", "<cmd>lua require('various-textobjs').indentation(false, false)<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').subword(true)<CR>")
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').subword(false)<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').toNextClosingBracket()<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').restOfParagraph()<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').entireBuffer()<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').nearEoL()<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').lineCharacterwise()<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').column()<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').value(true)<CR>")
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').value(false)<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').key(true)<CR>")
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').key(false)<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').url()<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').diagnostic()<CR>")
    
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').closedFold(true)<CR>")
    keymap({ "o", "x" }, "YOUR_MAPPING", "<cmd>lua require('various-textobjs').closedFold(false)<CR>")
    
    --------------------------------------------------------------------------------------
    -- put these into the ftplugins or autocms for the filetypes you want to use them with
    
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').mdlink(true)<CR>",
        { buffer = true }
    )
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').mdlink(false)<CR>",
        { buffer = true }
    )
    
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').mdFencedCodeBlock(true)<CR>",
        { buffer = true }
    )
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').mdFencedCodeBlock(false)<CR>",
        { buffer = true }
    )
    
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').cssSelector(true)<CR>",
        { buffer = true }
    )
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').cssSelector(false)<CR>",
        { buffer = true }
    )
    
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').htmlAttribute(true)<CR>",
        { buffer = true }
    )
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').htmlAttribute(false)<CR>",
        { buffer = true }
    )
    
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').doubleSquareBrackets(true)<CR>",
        { buffer = true }
    )
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').doubleSquareBrackets(false)<CR>",
        { buffer = true }
    )
    
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').shellPipe(true)<CR>",
        { buffer = true }
    )
    keymap(
        { "o", "x" },
        "YOUR_MAPPING",
        "<cmd>lua require('various-textobjs').shellPipe(false)<CR>",
        { buffer = true }
    )
<


ADVANCED USAGE        *various-textobjs-nvim-various-textobjs--advanced-usage*


SMART ALTERNATIVE TO GX ~

Using the URL textobj, you can also write a small snippet to replace netrw’s
`gx`. The code below retrieves the next URL (within the amount of lines
configured in the `setup` call), and opens it in your browser. While this is
already an improvement to vim’s built-in `gx`, which requires the cursor to
be standing on a URL to work, you can even go one step further. If no URL has
been found within the next few lines, the `:UrlView` command from urlview.nvim
<https://github.com/axieax/urlview.nvim> is triggered. This searches the entire
buffer for URLs from which you can choose one to open.

>lua
    vim.keymap.set("n", "gx", function()
        require("various-textobjs").url() -- select URL
        -- this works since the plugin switched to visual mode
        -- if the textobj has been found
        local foundURL = vim.fn.mode():find("v")
    
        -- if not found in proximity, search whole buffer via urlview.nvim instead
        if not foundURL then
            vim.cmd.UrlView("buffer")
            return
        end
    
        -- retrieve URL with the z-register as intermediary
        vim.cmd.normal { '"zy', bang = true }
        local url = vim.fn.getreg("z")
    
        -- open with the OS-specific shell command
        local opener
        if vim.fn.has("macunix") == 1 then
            opener = "open"
        elseif vim.fn.has("linux") == 1 then
            opener = "xdg-open"
        elseif vim.fn.has("win64") == 1 or vim.fn.has("win32") == 1 then
            opener = "start"
        end
        local openCommand = string.format("%s '%s' >/dev/null 2>&1", opener, url)
        os.execute(openCommand)
    end, { desc = "Smart URL Opener" })
<


LIMITATIONS              *various-textobjs-nvim-various-textobjs--limitations*


- This plugin uses pattern matching, so it can be inaccurate in some edge cases.
- The value-textobj does not work with multi-line values.


OTHER TEXT-OBJECT PLUGINS*various-textobjs-nvim-various-textobjs--other-text-object-plugins*


- treesitter-textobjects <https://github.com/nvim-treesitter/nvim-treesitter-textobjects>
- treesitter-textsubjects <https://github.com/RRethy/nvim-treesitter-textsubjects>
- ts-hint-textobject <https://github.com/mfussenegger/nvim-ts-hint-textobject>
- mini.ai <https://github.com/echasnovski/mini.nvim/blob/main/readmes/mini-ai.md>
- targets.vim <https://github.com/wellle/targets.vim>


CREDITS                      *various-textobjs-nvim-various-textobjs--credits*

**Thanks** - To the Valuable Dev for their blog post on how to get started with
creating custom text objects
<https://thevaluable.dev/vim-create-text-objects/>. - To `@vypxl` and `@ii14`
for figuring out dot-repeatability.
<https://github.com/chrisgrieser/nvim-spider/pull/4>

**About Me** In my day job, I am a sociologist studying the social mechanisms
underlying the digital economy. For my PhD project, I investigate the
governance of the app economy and how software ecosystems manage the tension
between innovation and compatibility. If you are interested in this subject,
feel free to get in touch.

**Blog** I also occasionally blog about vim: Nano Tips for Vim
<https://nanotipsforvim.prose.sh>

**Profiles** - Discord <https://discordapp.com/users/462774483044794368/> -
Academic Website <https://chris-grieser.de/> - GitHub
<https://github.com/chrisgrieser/> - Twitter <https://twitter.com/pseudo_meta>
- ResearchGate <https://www.researchgate.net/profile/Christopher-Grieser> -
LinkedIn <https://www.linkedin.com/in/christopher-grieser-ba693b17a/>

**Buy Me a Coffee**

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
